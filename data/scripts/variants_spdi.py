import csv
import hashlib
import argparse
import os
from ga4gh.vrs.extras.translator import Translator
from ga4gh.vrs.dataproxy import create_dataproxy

CHR_MAP = {
    '1': 'NC_000001.11',
    '2': 'NC_000002.12',
    '3': 'NC_000003.12',
    '4': 'NC_000004.12',
    '5': 'NC_000005.10',
    '6': 'NC_000006.12',
    '7': 'NC_000007.14',
    '8': 'NC_000008.11',
    '9': 'NC_000009.12',
    '10': 'NC_000010.11',
    '11': 'NC_000011.10',
    '12': 'NC_000012.12',
    '13': 'NC_000013.11',
    '14': 'NC_000014.9',
    '15': 'NC_000015.10',
    '16': 'NC_000016.10',
    '17': 'NC_000017.11',
    '18': 'NC_000018.10',
    '19': 'NC_000019.10',
    '20': 'NC_000020.11',
    '21': 'NC_000021.9',
    '22': 'NC_000022.11',
    'X': 'NC_000023.11',
    'Y': 'NC_000024.10'

}


def build_variant_id(chr, pos_first_ref_base, ref_seq, alt_seq, assembly='GRCh38'):
    key = '{}_{}_{}_{}_{}'.format(str(chr).replace(
        'chr', '').lower(), pos_first_ref_base, ref_seq, alt_seq, assembly)
    return hashlib.sha256(key.encode()).hexdigest()


def build_allele(chr, pos, ref, alt, translator):
    gnomad_exp = f'{chr}-{pos}-{ref}-{alt}'
    allele = translator.translate_from(gnomad_exp, 'gnomad')
    return allele


def build_spdi(chr, pos, ref, alt, translator):
    # Only use translator if the ref or alt is more than one base.
    if len(ref) == 1 and len(alt) == 1:
        chr_ref = CHR_MAP[chr]
        pos_spdi = int(pos) - 1
        # example SPDI: NC_000024.10:10004:C:G
        spdi = f'{chr_ref}:{pos_spdi}:{ref}:{alt}'
    else:
        allele = build_allele(chr, pos, ref, alt, translator)
        spdi = translator.translate_to(allele, 'spdi')[0]
        del_seq = translator.data_proxy.get_sequence(str(
            allele.location.sequence_id), allele.location.interval.start.value, allele.location.interval.end.value)
        spdi = convert_spdi(spdi, del_seq)
    return spdi


def build_spdi_hgvs(chr, pos, ref, alt, translator):
    # Only use translator if the ref or alt is more than one base.
    if len(ref) == 1 and len(alt) == 1:
        chr_ref = CHR_MAP[chr]
        pos_spdi = int(pos) - 1
        # example SPDI: NC_000024.10:10004:C:G
        spdi = f'{chr_ref}:{pos_spdi}:{ref}:{alt}'

        pos_hgvs = f'g.{pos}'
        # example HGVS: NC_000024.10:g.10005C>G
        hgvs = f'{chr_ref}:{pos_hgvs}{ref}>{alt}'
    else:
        allele = build_allele(chr, pos, ref, alt, translator)
        spdi = translator.translate_to(allele, 'spdi')[0]
        seq = translator.data_proxy.get_sequence(str(
            allele.location.sequence_id), allele.location.interval.start.value, allele.location.interval.end.value)

        spdi = convert_spdi(spdi, seq)
        hgvs = translator.translate_to(allele, 'hgvs')[0]
    return spdi, hgvs

# the spdi generated by vrs is in this format: SEQUENCE-ID:POSITION:DEL-LEN:INS-SEQUENCE
# need to convert to this format for igvf catalog: SEQUENCE-ID:POSITION:DEL-SEQUENCE:INS-SEQUENCE


def convert_spdi(spdi, seq):
    ls = spdi.split(':')
    ls[2] = seq
    spdi = ':'.join(ls)
    return spdi


def build_hgvs_from_spdi(spdi):
    ins_seq = spdi.split(':')[-1]
    del_seq = spdi.split(':')[2]
    spdi_pos = int(spdi.split(':')[1])
    chr_ref = spdi.split(':')[0]
    if len(ins_seq) == 1 and len(del_seq) == 1:
        hgvs = f'{chr_ref}:g.{spdi_pos + 1}{del_seq}>{ins_seq}'
    # check if this variant is a deletion
    elif len(del_seq) > len(ins_seq):
        pos_hgvs_start = spdi_pos + 1 + len(ins_seq)
        pos_hgvs_end = spdi_pos + len(del_seq)
        if pos_hgvs_start == pos_hgvs_end:
            hgvs = f'{chr_ref}:g.{pos_hgvs_start}del'
        else:
            hgvs = f'{chr_ref}:g.{pos_hgvs_start}_{pos_hgvs_end}del'

    else:
        pos_hgvs_start = spdi_pos + len(del_seq)
        pos_hgvs_end = spdi_pos + len(del_seq) + 1
        insert_seq_hgvs = ins_seq[len(del_seq):]
        hgvs = f'{chr_ref}:g.{pos_hgvs_start}_{pos_hgvs_end}ins{insert_seq_hgvs}'
    return hgvs

# in order to use translator locally, need to install seqrepo and pull data to local first
# check instruction here: https://github.com/biocommons/biocommons.seqrepo
# for each file, an output file will be genereated.
# each row in output file cotains: id in catalog, chr, pos, ref, alt, spdi, hgvs
# download input file from here: https://drive.google.com/drive/folders/1LKH6b_izU4291PTDwnr3n_le8gLxr4fv
# we need the file ends with vcf.gz format. Extract it first before using it.


def main():
    parser = argparse.ArgumentParser(
        prog='Variants SPDI generator',
        description='Generate SPDI for variants'
    )
    parser.add_argument('-i', '--input', required=True,
                        help='input file path')
    parser.add_argument('-o', '--output', required=True,
                        help='output file path')
    args = parser.parse_args()
    input_file_path = args.input
    output_path = args.output

    dp = create_dataproxy('seqrepo+file:///usr/local/share/seqrepo/2018-11-26')
    translator = Translator(data_proxy=dp)

    with open(output_path, 'w', newline='') as csvfile:
        writer = csv.writer(csvfile, delimiter='\t')

        with open(input_file_path, 'rt') as input_file:
            num = 0
            reader = csv.reader(input_file, delimiter='\t')
            row = next(reader)
            while not (row[0].startswith('#Chrom') or row[0].startswith('#CHROM')):
                row = next(reader)
            for row in reader:
                chr = row[0]
                pos = row[1]
                ref = row[3]
                alt = row[4]
                if pos == 'NA' or ref == 'NA' or alt == 'NA':
                    continue
                if chr not in CHR_MAP.keys():
                    continue
                id = build_variant_id(
                    chr,
                    pos,
                    ref,
                    alt
                )
                spdi = build_spdi(chr, pos, ref, alt, translator)
                hgvs = build_hgvs_from_spdi(spdi)
                writer.writerow([id, chr, pos, ref, alt, spdi, hgvs])
                num += 1
                if num % 10000 == 0:
                    print(f'chr: {chr}, num: {num}')


if __name__ == '__main__':
    main()
