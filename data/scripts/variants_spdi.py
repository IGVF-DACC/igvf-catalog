import gzip
import csv
import hashlib
import os
from ga4gh.vrs.extras.translator import Translator
from ga4gh.vrs.dataproxy import create_dataproxy

chr_map = {
    '1': 'NC_000001.11',
    '2': 'NC_000002.12',
    '3': 'NC_000003.12',
    '4': 'NC_000004.12',
    '5': 'NC_000005.10',
    '6': 'NC_000006.12',
    '7': 'NC_000007.14',
    '8': 'NC_000008.11',
    '9': 'NC_000009.12',
    '10': 'NC_000010.11',
    '11': 'NC_000011.10',
    '12': 'NC_000012.12',
    '13': 'NC_000013.11',
    '14': 'NC_000014.9',
    '15': 'NC_000015.10',
    '16': 'NC_000016.10',
    '17': 'NC_000017.11',
    '18': 'NC_000018.10',
    '19': 'NC_000019.10',
    '20': 'NC_000020.11',
    '21': 'NC_000021.9',
    '22': 'NC_000022.11',
    'X': 'NC_000023.11',
    'Y': 'NC_000024.10'

}


def build_variant_id(chr, pos_first_ref_base, ref_seq, alt_seq, assembly='GRCh38'):
    key = '{}_{}_{}_{}_{}'.format(str(chr).replace(
        'chr', '').lower(), pos_first_ref_base, ref_seq, alt_seq, assembly)
    return hashlib.sha256(key.encode()).hexdigest()

# the spdi generated by vrs is in this format: SEQUENCE-ID:POSITION:DEL-LEN:INS-SEQUENCE
# need to convert to this format for igvf catalog: SEQUENCE-ID:POSITION:DEL-SEQUENCE:INS-SEQUENCE


def convert_spdi(spdi, seq):
    ls = spdi.split(':')
    ls[2] = seq
    spdi = ':'.join(ls)
    return spdi


# in order to use translator locally, need to install seqrepo and pull data to local first
# check instruction here: https://github.com/biocommons/biocommons.seqrepo
# for each file, an output file will be genereated.
# each row in output file cotains: id in catalog, chr, pos, ref, alt, spdi, hgvs


def main():
    dp = create_dataproxy('seqrepo+file:///usr/local/share/seqrepo/2018-11-26')
    translator = Translator(data_proxy=dp)
    # download input file from here: https://drive.google.com/drive/folders/1LKH6b_izU4291PTDwnr3n_le8gLxr4fv
    # we need the file ends with vcf.gz format.
    input_folder = '/home/ubuntu/datasets/favor'
    ouput_folder = '/home/ubuntu/datasets/favor_output'
    file_list = os.listdir(input_folder)
    for file in file_list:
        file_name_split = file.split('.')
        if file_name_split[0].startswith('dbSNP'):
            file_chr = file_name_split[1]
        else:
            file_chr = file_name_split[0]
        output_name = f'{file_chr}_spdi.tsv'
        output_path = os.path.join(ouput_folder, output_name)
        file_path = os.path.join(input_folder, file)
        with open(output_path, 'w', newline='') as csvfile:
            writer = csv.writer(csvfile, delimiter='\t')

            with gzip.open(file_path, 'rt') as input_file:
                num = 0
                reader = csv.reader(input_file, delimiter='\t')
                row = next(reader)
                while not (row[0].startswith('#Chrom') or row[0].startswith('#CHROM')):
                    row = next(reader)
                for row in reader:
                    chr = row[0]
                    pos = row[1]
                    ref = row[3]
                    alt = row[4]
                    if pos == 'NA' or ref == 'NA' or alt == 'NA':
                        continue
                    if chr not in chr_map.keys():
                        continue
                    id = build_variant_id(
                        chr,
                        pos,
                        ref,
                        alt
                    )
                    # Only use translator if the ref and alt is more than one base.
                    if len(ref) == 1 and len(alt) == 1:
                        chr_ref = chr_map[chr]
                        pos_spdi = int(pos) - 1
                        # example SPDI: NC_000024.10:10004:C:G
                        spdi = f'{chr_ref}:{pos_spdi}:{ref}:{alt}'
                        pos_hgvs = f'g.{pos}'
                        # example HGVS: NC_000024.10:g.10005C>G
                        hgvs = f'{chr_ref}:{pos_hgvs}{ref}>{alt}'
                    else:
                        gnomad_exp = f'{chr}-{pos}-{ref}-{alt}'
                        allele = translator.translate_from(
                            gnomad_exp, 'gnomad')
                        spdi = translator.translate_to(allele, 'spdi')[0]
                        seq = translator.data_proxy.get_sequence(str(
                            allele.location.sequence_id), allele.location.interval.start.value, allele.location.interval.end.value)

                        spdi = convert_spdi(spdi, seq)
                        hgvs = translator.translate_to(allele, 'hgvs')[0]
                    writer.writerow([id, chr, pos, ref, alt, spdi, hgvs])
                    num += 1
                    if num % 10000 == 0:
                        print(f'chr: {chr}, num: {num}')


if __name__ == '__main__':
    main()
