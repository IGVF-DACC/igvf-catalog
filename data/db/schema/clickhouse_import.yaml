variants_variants: |
  INSERT INTO variants_variants
  SELECT chr, ancestry, toBool(negated) as negated, variant_1_base_pair, variant_2_base_pair, variant_1_rsid, variant_2_rsid, `r2:long` as r2, `d_prime:long` as d_prime, label, name, inverse_name, source, source_url, splitByString('/', assumeNotNull(_from))[2] as variants_1_id, splitByString('/', assumeNotNull(_to))[2] as variants_2_id
  FROM s3('s3://igvf-catalog-parsed-collections/clickhouse/variants_variants.jsonl.gz', 'JSONEachRow');

variants: |
  INSERT INTO variants
  SELECT name, chr, pos, rsid, ref, alt, qual, spdi, hgvs, ca_id, filter, format, source, organism, source_url, annotations, _key as id
  FROM s3('s3://igvf-catalog-parsed-collections/clickhouse/variants.jsonl.gz', 'JSONEachRow', '_key String, name String, chr String, pos Int64, rsid Array(String), ref String, alt String, qual String, filter Nullable(String), variation_type String, annotations JSON, ca_id String, format String, spdi String, hgvs String, organism String, source String, source_url String');
  INSERT INTO variants
  SELECT name, chr, pos, rsid, ref, alt, qual, spdi, hgvs, ca_id, filter, format, source, organism, source_url, annotations, _key as id
  FROM s3('s3://igvf-catalog-parsed-collections/variants/variants_IGVFFI5890AHYL.jsonl');

coding_variants: |
  INSERT INTO coding_variants
  SELECT ref, alt, aapos, name, gene_name, protein_name, hgvsp, hgvs, refcodon, codonpos, transcript_id, SIFT_score, SIFT4G_score, Polyphen2_HDIV_score, Polyphen2_HVAR_score, VEST4_score, Mcap_score, REVEL_score, MutPred_score, BayesDel_addAF_score, BayesDel_noAF_score, VARITY_R_score, VARITY_ER_score, VARITY_R_LOO_score, VARITY_ER_LOO_score, ESM1b_score, EVE_score, AlphaMissense_score, CADD_raw_score, source, source_url, _key as id
  FROM s3('s3://igvf-catalog-parsed-collections/coding_variants/*');

coding_variants_proteins: |
  INSERT INTO coding_variants_proteins
  SELECT source, source_url, name, inverse_name, splitByString('/', assumeNotNull(_from))[2] as coding_variants_id, splitByString('/', assumeNotNull(_to))[2] as proteins_id
  FROM s3('s3://igvf-catalog-parsed-collections/coding_variants_proteins/*.jsonl');

variants_coding_variants: |
  INSERT INTO variants_coding_variants
  SELECT source, source_url, name, inverse_name, chr, `pos:long` as pos, ref, alt, splitByString('/', assumeNotNull(_from))[2] as variants_id, splitByString('/', assumeNotNull(_to))[2] as coding_variants_id
  FROM s3('s3://igvf-catalog-parsed-collections/variants_coding_variants/*.jsonl');

genes: |
  INSERT INTO genes
  SELECT chr, start, end, name, gene_id, gene_type, hgnc, entrez, alias, source, version, source_url, 'Homo sapiens', _key as id
  FROM s3('s3://igvf-catalog-parsed-collections/genes/genes_*.jsonl');

transcripts: |
  INSERT INTO transcripts
  SELECT chr, start, end, gene_name, name, transcript_id, transcript_type, source, version, source_url, 'Homo sapiens', _key as id
  FROM s3('s3://igvf-catalog-parsed-collections/transcripts/transcripts_*.jsonl');

ontology_terms: |
  INSERT INTO ontology_terms
  SELECT uri, term_id, name, description, ifNull(synonyms, []), source, subontology, [], _key as id
  FROM s3('s3://igvf-catalog-parsed-collections/clickhouse/ontology_terms.jsonl');

genes_transcripts: |
  INSERT INTO genes_transcripts
  SELECT source, version, source_url, name, inverse_name, biological_process, organism, _key as id, splitByString('/', assumeNotNull(_to))[2] as transcripts_id, splitByString('/', assumeNotNull(_from))[2] as genes_id, NULL, NULL
  FROM s3('s3://igvf-catalog-parsed-collections/genes_transcripts/genes_transcripts_IGVFFI7217ZMJZ.vcf.jsonl');
  INSERT INTO genes_transcripts
  SELECT source, version, source_url, name, inverse_name, biological_process, organism, _key as id, NULL, NULL, splitByString('/', assumeNotNull(_to))[2] as mm_transcripts_id, splitByString('/', assumeNotNull(_from))[2] as mm_genes_id
  FROM s3('s3://igvf-catalog-parsed-collections/genes_transcripts/mm_genes_transcripts_IGVFFI2412FAXG.vcf.jsonl');

genes_structure: |
  INSERT INTO genes_structure
  SELECT _key as id, name, chr, start, end, strand, type, gene_id, gene_name, transcript_id, transcript_name, exon_number, exon_id, source, version, source_url, organism
  FROM s3('s3://igvf-catalog-parsed-collections/genes_structure/*.jsonl');

mm_genes_structure: |
  INSERT INTO mm_genes_structure
  SELECT _key as id, name, chr, start, end, strand, type, gene_id, gene_name, transcript_id, transcript_name, exon_number, exon_id, source, version, source_url, organism
  FROM s3('s3://igvf-catalog-parsed-collections/clickhouse/mm_genes_structure.jsonl.gz');

transcripts_genes_structure: |
  INSERT INTO transcripts_genes_structure
  SELECT source, version, source_url, name, inverse_name, organism, splitByString('/', assumeNotNull(_from))[2] as transcripts_id, splitByString('/', assumeNotNull(_to))[2] as genes_structure_id
  FROM s3('s3://igvf-catalog-parsed-collections/transcripts_genes_structure/*.jsonl');

mm_transcripts_mm_genes_structure: |
  INSERT INTO mm_transcripts_mm_genes_structure
  SELECT source, version, source_url, name, inverse_name, organism, splitByString('/', assumeNotNull(_from))[2] as mm_transcripts_id, splitByString('/', assumeNotNull(_to))[2] as mm_genes_structure_id
  FROM s3('s3://igvf-catalog-parsed-collections/mm_transcripts_mm_genes_structure/*.jsonl');

ontology_terms_ontology_terms: |
  INSERT INTO ontology_terms_ontology_terms
  SELECT name, inverse_name, source, _key as id, splitByString('/', assumeNotNull(_from))[2] as ontology_terms_1_id, splitByString('/', assumeNotNull(_to))[2] as ontology_terms_2_id
  FROM s3('s3://igvf-catalog-parsed-collections/clickhouse/ontology_terms_ontology_terms.jsonl');

proteins: |
  INSERT INTO proteins
  SELECT name, full_name, organism, dbxrefs, source, source_url, _key as id
  FROM s3('s3://igvf-catalog-parsed-collections/proteins/*.jsonl');

# traditional JSONLs have about 5k duplicated items amoungs different JSONLs:
# gene_products_terms: |
#   INSERT INTO gene_products_terms
#   SELECT db, gene_product_id, gene_product_symbol, qualifier, go_id, db_reference, evidence, with, aspect, gene_product_name, synonyms, gene_product_type, taxon_id, date, assigned_by, annotation_extension, gene_product_form_id, source, source_url, organism, name, inverse_name, _key as id, splitByString('/', assumeNotNull(_from))[2] as ontology_terms_id, splitByString('/', assumeNotNull(_to))[2] as proteins_id, NULL
#   FROM s3('s3://igvf-catalog-parsed-collections/gene_products_terms/gaf_human_isoform.jsonl');
#   INSERT INTO gene_products_terms
#   SELECT db, gene_product_id, gene_product_symbol, qualifier, go_id, db_reference, evidence, with, aspect, gene_product_name, synonyms, gene_product_type, taxon_id, date, assigned_by, annotation_extension, gene_product_form_id, source, source_url, organism, name, inverse_name, _key as id, splitByString('/', assumeNotNull(_from))[2] as ontology_terms_id, NULL, splitByString('/', assumeNotNull(_to))[2] as transcripts_id
#   FROM s3('s3://igvf-catalog-parsed-collections/gene_products_terms/gaf_human_rna.jsonl');
#   INSERT INTO gene_products_terms
#   SELECT db, gene_product_id, gene_product_symbol, qualifier, go_id, db_reference, evidence, with, aspect, gene_product_name, synonyms, gene_product_type, taxon_id, date, assigned_by, annotation_extension, gene_product_form_id, source, source_url, organism, name, inverse_name, _key as id, splitByString('/', assumeNotNull(_from))[2] as ontology_terms_id, splitByString('/', assumeNotNull(_to))[2] as proteins_id, NULL
#   FROM s3('s3://igvf-catalog-parsed-collections/gene_products_terms/gaf_human.jsonl');
#   INSERT INTO gene_products_terms
#   SELECT db, gene_product_id, gene_product_symbol, qualifier, go_id, db_reference, evidence, with, aspect, gene_product_name, synonyms, gene_product_type, taxon_id, date, assigned_by, annotation_extension, gene_product_form_id, source, source_url, organism, name, inverse_name, _key as id, splitByString('/', assumeNotNull(_from))[2] as ontology_terms_id, splitByString('/', assumeNotNull(_to))[2] as proteins_id, NULL
#   FROM s3('s3://igvf-catalog-parsed-collections/gene_products_terms/gaf_mouse_uniq.jsonl');

# using ArangoDB dump to solve duplicates
gene_products_terms: |
  INSERT INTO gene_products_terms
  SELECT db, gene_product_id, gene_product_symbol, qualifier, go_id, db_reference, evidence, with, aspect, gene_product_name, synonyms, gene_product_type, taxon_id, date, assigned_by, annotation_extension, gene_product_form_id, source, source_url, organism, name, inverse_name, _key as id, splitByString('/', assumeNotNull(_from))[2] as ontology_terms_id, NULL, splitByString('/', assumeNotNull(_to))[2] as transcripts_id
  FROM s3('s3://igvf-catalog-parsed-collections/clickhouse/gene_products_terms_transcripts.jsonl.gz', 'JSONEachRow');
  INSERT INTO gene_products_terms
  SELECT db, gene_product_id, gene_product_symbol, qualifier, go_id, db_reference, evidence, with, aspect, gene_product_name, synonyms, gene_product_type, taxon_id, date, assigned_by, annotation_extension, gene_product_form_id, source, source_url, organism, name, inverse_name, _key as id, splitByString('/', assumeNotNull(_from))[2] as ontology_terms_id, splitByString('/', assumeNotNull(_to))[2] as proteins_id, NULL
  FROM s3('s3://igvf-catalog-parsed-collections/clickhouse/gene_products_terms_proteins.jsonl.gz', 'JSONEachRow');

motifs: |
  INSERT INTO motifs
  SELECT name, tf_name, source, source_url, pwm, length, _key as id
  FROM s3('s3://igvf-catalog-parsed-collections/motifs/*.jsonl');

# Waiting on SEM Predictions which will introduce (_to: complexes).
motifs_proteins: |
  INSERT INTO motifs_proteins
  SELECT source, _key as id, biological_process, splitByString('/', assumeNotNull(_from))[2] as motifs_id, splitByString('/', assumeNotNull(_to))[2] as proteins_id, NULL
  FROM s3('s3://igvf-catalog-parsed-collections/motifs_proteins/motifs_proteins_IGVFFI9678CVIS.jsonl');

mm_genes_mm_genes: |
  INSERT INTO mm_genes_mm_genes
  SELECT detection_method, detection_method_code, interaction_type, interaction_type_code, confidence_value_biogrid, confidence_value_intact, source, pmids, name, inverse_name, _key as id, splitByString('/', assumeNotNull(_from))[2] as mm_genes_1_id, splitByString('/', assumeNotNull(_to))[2] as mm_genes_2_id
  FROM s3('s3://igvf-catalog-parsed-collections/mm_genes_mm_genes/*.jsonl');

genes_pathways: |
  INSERT INTO genes_pathways
  SELECT name, inverse_name, source, source_url, organism, _key as id, splitByString('/', assumeNotNull(_from))[2] as genes_id, splitByString('/', assumeNotNull(_to))[2] as pathways_id
  FROM s3('s3://igvf-catalog-parsed-collections/genes_pathways/*.jsonl');

pathways: |
  INSERT INTO pathways
  SELECT id_version, name, is_in_disease, name_aliases, organism, disease_ontology_terms, go_biological_process, is_top_lvel_pathway, source, source_url, _key as id
  FROM s3('s3://igvf-catalog-parsed-collections/pathways/*.jsonl');

pathways_pathways: |
  INSERT INTO pathways_pathways
  SELECT source, source_url, name, inverse_name, organism, _key as id, splitByString('/', assumeNotNull(_from))[2] as pathways_1_id, splitByString('/', assumeNotNull(_to))[2] as pathways_2_id
  FROM s3('s3://igvf-catalog-parsed-collections/pathways_pathways/*.jsonl');

studies: |
  INSERT INTO studies
  SELECT name, ancestry_initial, ancestry_replication, n_cases, n_initial, n_replication, pmid, pub_author, pub_date, pub_journal, pub_title, has_sumstats, num_assoc_loci, study_source, trait_reported, trait_efos, trait_category, source, version, _key as id
  FROM s3('s3://igvf-catalog-parsed-collections/studies/*.jsonl');

variants_phenotypes: |
  INSERT INTO variants_phenotypes
  SELECT equivalent_ontology_term, source, version, _key as id, splitByString('/', assumeNotNull(_from))[2] as variants_id, splitByString('/', assumeNotNull(_to))[2] as ontology_terms_id
  FROM s3('s3://igvf-catalog-parsed-collections/variants_phenotypes/*.jsonl');

variants_phenotypes_studies: |
  INSERT INTO variants_phenotypes_studies
  SELECT lead_chrom, lead_pos, lead_ref, lead_alt, phenotype_term, direction, beta, beta_ci_lower, beta_ci_upper, odds_ratio, oddsr_ci_lower, oddsr_ci_upper, p_val_mantissa, p_val_exponent, p_val, log10pvalue, tagged_variants, source, version, name, inverse_name, splitByString('/', assumeNotNull(_from))[2] as variants_phenotypes_id, splitByString('/', assumeNotNull(_to))[2] as studies_id
  FROM s3('s3://igvf-catalog-parsed-collections/variants_phenotypes_studies/*.jsonl', 'JSONEachRow', 'lead_chrom String, lead_pos UInt32, lead_ref String, lead_alt String, phenotype_term String, direction String, beta Float64, beta_ci_lower Float64, beta_ci_upper Float64, odds_ratio Float64, oddsr_ci_lower Float64, oddsr_ci_upper Float64, p_val_mantissa Float64, p_val_exponent Float64, p_val Float64, log10pvalue Float64, tagged_variants Array(JSON), source String, version String, name String, inverse_name String, _from String, _to String');

drugs: |
  INSERT INTO drugs
  SELECT name, drug_ontology_terms, source, source_url, _key as id
  FROM s3('s3://igvf-catalog-parsed-collections/drugs/*.jsonl')

variants_drugs: |
  INSERT INTO variants_drugs
  SELECT gene_symbol, pmid, study_parameters, phenotype_categories, name, inverse_name, source, source_url, _key as id, splitByString('/', assumeNotNull(_from))[2] as variants_id, splitByString('/', assumeNotNull(_to))[2] as variants_drugs_id
  FROM s3('s3://igvf-catalog-parsed-collections/variants_drugs/*.jsonl', 'JSONEachRow', 'gene_symbol Array(String), pmid String, study_parameters Array(JSON), phenotype_categories Array(String), name String, inverse_name String, source String, source_url String, _key String, _from String, _to String')

variants_drugs_genes: |
  INSERT INTO variants_drugs_genes
  SELECT gene_symbol, source, source_url, name, inverse_name, _key as id, splitByString('/', assumeNotNull(_from))[2] as variants_drugs_id, splitByString('/', assumeNotNull(_to))[2] as genes_id
  FROM s3('s3://igvf-catalog-parsed-collections/clickhouse/variants_drugs_genes.jsonl.gz', 'JSONEachRow');

transcripts_proteins: |
  INSERT INTO transcripts_proteins
  SELECT source, source_url, name, inverse_name, _key as id, splitByString('/', assumeNotNull(_from))[2] as transcripts_id, NULL, splitByString('/', assumeNotNull(_to))[2] as proteins_id
  FROM s3('s3://igvf-catalog-parsed-collections/transcripts_proteins/sprot.jsonl', 'JSONEachRow');
  INSERT INTO transcripts_proteins
  SELECT source, source_url, name, inverse_name, _key as id, splitByString('/', assumeNotNull(_from))[2] as transcripts_id, NULL, splitByString('/', assumeNotNull(_to))[2] as proteins_id
  FROM s3('s3://igvf-catalog-parsed-collections/transcripts_proteins/trembl.jsonl', 'JSONEachRow');
  INSERT INTO transcripts_proteins
  SELECT source, source_url, name, inverse_name, _key as id, NULL, splitByString('/', assumeNotNull(_from))[2] as mm_transcripts_id, splitByString('/', assumeNotNull(_to))[2] as proteins_id
  FROM s3('s3://igvf-catalog-parsed-collections/transcripts_proteins/*_mouse.jsonl', 'JSONEachRow');

# Waiting on SEM Predictions which can introduce _to: complexes.
variants_proteins: |
  INSERT INTO variants_proteins
  SELECT rsid, label, source, name, inverse_name, chr, motif_fc, motif_pos, motif_orient, motif_conc, motif, biological_process, _key as id, splitByString('/', assumeNotNull(_from))[2] as variants_id, splitByString('/', assumeNotNull(_to))[2] as proteins_id
  FROM s3('s3://igvf-catalog-parsed-collections/clickhouse/variants_proteins.jsonl.gz', 'JSONEachRow');

variants_proteins_terms: |
  INSERT INTO variants_proteins_terms
  SELECT es_mean_ref, es_mean_alt, fdrp_bh_ref, fdrp_bh_alt, biological_context, source_url, name, inverse_name, _key as id, splitByString('/', assumeNotNull(_from))[2] as variants_proteins_id, splitByString('/', assumeNotNull(_to))[2] as ontology_terms_id
  FROM s3('s3://igvf-catalog-parsed-collections/variants_proteins_terms/*.jsonl', 'JSONEachRow')

# ArangoDB can't import the following JSONLs from afgr_sqtls.jsonl because they have p_value = NaN
# 2025-01-16T00:12:10Z [11262] WARNING [e5a29] {general} at position 9463: invalid JSON type (expecting object, probably parse error), offending context: {"_key": "8861b7bbcf84fa908e92ae868cf312551acef5cc47c39155f8ba4778800b8111", "_from": "variants/9dfc265f06997b7bf3cf476cd42499e5ee16a2293bb1e8ffbc021e0f44b9f191", "_to": "genes/ENSG00000164308", "biological_context": "lymphoblastoid cell line", "chr": "ch...
# 2025-01-16T00:12:10Z [11262] WARNING [e5a29] {general} at position 9494: invalid JSON type (expecting object, probably parse error), offending context: {"_key": "c3e76881c903ea2102d1264ab46b5bb3a1959330e7fcb715969e03fdb62f4933", "_from": "variants/f0871674778d8c16a33a7b948acf3889015ee7c64bd24067b0bbee59340aaaae", "_to": "genes/ENSG00000164308", "biological_context": "lymphoblastoid cell line", "chr": "ch...
# 2025-01-16T00:12:10Z [11262] WARNING [e5a29] {general} at position 9505: invalid JSON type (expecting object, probably parse error), offending context: {"_key": "a8b0fe9752dcdd1718c30fca2bb8199474d11ea1467d23b88d6005807d1a9ac3", "_from": "variants/f557351096c15fecbaa5041fdbbe1d671e302aa3fa0fcdc33ea40cd6c1f64110", "_to": "genes/ENSG00000164308", "biological_context": "lymphoblastoid cell line", "chr": "ch..
# 2025-01-16T00:12:33Z [11262] WARNING [e5a29] {general} at position 13451: invalid JSON type (expecting object, probably parse error), offending context: {"_key": "0c3f8a243505379c92b9d05047f578701517a2621b3b9102f959f0b0ea05123c", "_from": "variants/e323060f76cda15fa1e16defc80126678a760a7ea5adc25be5bd667001cd0650", "_to": "genes/ENSG00000232629", "biological_context": "lymphoblastoid cell line", "chr": "ch...
# 2025-01-16T00:12:33Z [11262] WARNING [e5a29] {general} at position 13460: invalid JSON type (expecting object, probably parse error), offending context: {"_key": "1e0a01c478577e16ad685f798fce734a66fe22abecc523c48663dc63fbd59d1f", "_from": "variants/32333f3ad5aa4fabb0b7235ebb78ad3e4d0746995ffc6808390a2ce5716b05ad", "_to": "genes/ENSG00000232629", "biological_context": "lymphoblastoid cell line", "chr": "ch...
# 2025-01-16T00:12:33Z [11262] WARNING [e5a29] {general} at position 13467: invalid JSON type (expecting object, probably parse error), offending context: {"_key": "3900fef3eb2264d20ce59b4caecf9555571469aa6cdd35596d6c22ed7ee9edb0", "_from": "variants/a362af3a6e0a8100f1c7ea54c36431f0d3f0d8efb7489f803f9015255c5278a4", "_to": "genes/ENSG00000232629", "biological_context": "lymphoblastoid cell line", "chr": "ch...
# 2025-01-16T00:12:33Z [11262] WARNING [e5a29] {general} at position 13959: invalid JSON type (expecting object, probably parse error), offending context: {"_key": "ddabb7076379f8ff40be7412698494ed8c7d5bb60b6d9da71bed832644535885", "_from": "variants/c82531ff8f5f3f129e1ba187157eec219952219475c8e5c7ebb2a696c086c265", "_to": "genes/ENSG00000232629", "biological_context": "lymphoblastoid cell line", "chr": "ch...
# 2025-01-16T00:12:56Z [11262] WARNING [e5a29] {general} at position 7583: invalid JSON type (expecting object, probably parse error), offending context: {"_key": "18ffb8d9c65bd1028441513ce2656edd656fc582ec7ff93b50c8a7b679dccc6e", "_from": "variants/6788b4fb4b78f4f6b6850036a73b02d628a98e5469f44d10ce9a733a253fbdc7", "_to": "genes/ENSG00000237004", "biological_context": "lymphoblastoid cell line", "chr": "ch...
# 2025-01-16T00:12:57Z [11262] WARNING [e5a29] {general} at position 2324: invalid JSON type (expecting object, probably parse error), offending context: {"_key": "e6021035d27352700967a60da8b7852e86f6a7759bbda60880cfa4b61c74d561", "_from": "variants/faa1a83b452f6d8f81f93e08442bd73e57a5f6453184e19d0d147f5a1c921b5e", "_to": "genes/ENSG00000112139", "biological_context": "lymphoblastoid cell line", "chr": "ch...
# 2025-01-16T00:13:00Z [11262] WARNING [e5a29] {general} at position 8910: invalid JSON type (expecting object, probably parse error), offending context: {"_key": "70d6d69a1306cb85bd41c06e80218cd3cacba1537c7a3d47844b9a907210b74a", "_from": "variants/e44fe059bbc3c60ea35b9b7b315b36e37b643518fb2e76b0ae04737e40fb7e6b", "_to": "genes/ENSG00000277149", "biological_context": "lymphoblastoid cell line", "chr": "ch...
# 2025-01-16T00:15:13Z [11262] WARNING [e5a29] {general} at position 7677: invalid JSON type (expecting object, probably parse error), offending context: {"_key": "32fee323c8ccbe1f127aad7a038dd5770a1762a3f76fa5602f264df7ebb368f4", "_from": "variants/9454db3dda5de216aabb5179a9df051614984c9601104266b0abd20c2e26e7ac", "_to": "genes/ENSG00000241945", "biological_context": "lymphoblastoid cell line", "chr": "ch...

# After importing JSONLS, run on Clickhouse: DELETE from variants_genes where isNaN(p_value)
variants_genes: |
  INSERT INTO variants_genes
  SELECT chr, p_value, log10pvalue, effect_size, NULL, NULL, NULL, NULL, NULL, intron_chr, intron_start, intron_end, label, name, inverse_name, biological_process, biological_context, source, source_url, _key as id, splitByString('/', assumeNotNull(_from))[2] as variants_ids, splitByString('/', assumeNotNull(_to))[2] as genes_id
  FROM s3('s3://igvf-catalog-parsed-collections/variants_genes/afgr_sqtls.jsonl', 'JSONEachRow', '_key String, _from String, _to String, chr String, biological_context String, p_value Float64, log10pvalue Float64, effect_size Float64, intron_chr String, intron_start String, intron_end String, label String, source String, source_url String, name String, inverse_name String, biological_process String');

  INSERT INTO variants_genes
  SELECT chr, p_value, log10pvalue, effect_size, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, label, name, inverse_name, biological_process, biological_context, source, source_url, _key as id, splitByString('/', assumeNotNull(_from))[2] as variants_ids, splitByString('/', assumeNotNull(_to))[2] as genes_id
  FROM s3('s3://igvf-catalog-parsed-collections/variants_genes/afgr_eqtls.jsonl', 'JSONEachRow', '_key String, _from String, _to String, chr String, biological_context String, p_value Float64, log10pvalue Float64, effect_size Float64, label String, source String, source_url String, name String, inverse_name String, biological_process String');

  INSERT INTO variants_genes
  SELECT chr, p_value, log10pvalue, effect_size, NULL, NULL, NULL, NULL, pval_beta, NULL, NULL, NULL, label, name, inverse_name, NULL, biological_context, source, source_url, _key as id, splitByString('/', assumeNotNull(_from))[2] as variants_ids, splitByString('/', assumeNotNull(_to))[2] as genes_id
  FROM s3('s3://igvf-catalog-parsed-collections/variants_genes/gtex_eqtls.jsonl', 'JSONEachRow', '_key String, _from String, _to String, chr String, biological_context String, p_value Float64, log10pvalue Float64, effect_size Float64, pval_beta Float64, label String, source String, source_url String, name String, inverse_name String');

  INSERT INTO variants_genes
  SELECT chr, p_value, log10pvalue, effect_size, sqrt_maf, pval_nominal_threshold, min_pval_nominal, effect_size_se, pval_beta, intron_chr, intron_start, intron_end, label, name, inverse_name, biological_process, biological_context, source, source_url, _key as id, splitByString('/', assumeNotNull(_from))[2] as variants_ids, splitByString('/', assumeNotNull(_to))[2] as genes_id
  FROM s3('s3://igvf-catalog-parsed-collections/variants_genes/gtex_sqtls_uniq.jsonl', 'JSONEachRow', '_key String, _from String, _to String, chr String, biological_context String, sqrt_maf Float64, p_value Float64, log10pvalue Float64, pval_nominal_threshold Float64, min_pval_nominal Float64, effect_size Float64, effect_size_se Float64, pval_beta Float64, intron_chr String, intron_start String, intron_end String, label String, source String, source_url String, name String, inverse_name String, biological_process String');

variants_genes_terms: |
  INSERT INTO variants_genes_terms
  SELECT biological_context, source, source_url, name, inverse_name, _key as id, splitByString('/', assumeNotNull(_from))[2] as variants_genes_id, splitByString('/', assumeNotNull(_to))[2] as ontology_terms_id
  FROM s3('s3://igvf-catalog-parsed-collections/variants_genes_terms/*.jsonl', 'JSONEachRow')

proteins_proteins: |
  INSERT INTO proteins_proteins
  SELECT detection_method, detection_method_code, interaction_type, interaction_type_code, confidence_value_biogrid, confidence_value_intact, source, pmids, organism, name, inverse_name, molecular_function, _key as id, splitByString('/', assumeNotNull(_from))[2] as proteins_1_id, splitByString('/', assumeNotNull(_to))[2] as proteins_2_id
  FROM s3('s3://igvf-catalog-parsed-collections/clickhouse/proteins_proteins.jsonl.gz', 'JSONEachRow');

genes_genes: |
  INSERT INTO genes_genes
  SELECT z_score, source, source_url, name, inverse_name, NULL, NULL, [], [], NULL, NULL, [], 'associated process' as associated_process, _key as id,  splitByString('/', assumeNotNull(_from))[2] as genes_1_id, splitByString('/', assumeNotNull(_to))[2] as genes_2_id
  FROM s3('s3://igvf-catalog-parsed-collections/genes_genes/genes_genes_coxpresdb.jsonl', 'JSONEachRow', '_key String, _from String, _to String, z_score Float64, source String, source_url String, name String, inverse_name String, "associated process" String');
  INSERT INTO genes_genes
  SELECT z_score, source, NULL, name, inverse_name, detection_method, detection_method_code, interaction_type, interaction_type_code, confidence_value_biogrid, confidence_value_intact, pmids, NULL,  _key as id,  splitByString('/', assumeNotNull(_from))[2] as genes_1_id, splitByString('/', assumeNotNull(_to))[2] as genes_2_id
  FROM s3('s3://igvf-catalog-parsed-collections/genes_genes/genes_genes_IGVFFI4317VDGK.jsonl', 'JSONEachRow')

diseases_genes: |
  INSERT INTO diseases_genes
  SELECT pmid, name, inverse_name, term_name, gene_symbol, association_type, association_status, source, source_url, _key as id, splitByString('/', assumeNotNull(_from))[2] as ontology_terms_id, splitByString('/', assumeNotNull(_to))[2] as genes_id
  FROM s3('s3://igvf-catalog-parsed-collections/clickhouse/diseases_genes.jsonl.gz', 'JSONEachRow');

variants_diseases: |
  INSERT INTO variants_diseases
  SELECT gene_id, assertion, pmids, name, inverse_name, source, source_url, _key as id, splitByString('/', assumeNotNull(_from))[2] as variants_id, splitByString('/', assumeNotNull(_to))[2] as ontology_terms_id
  FROM s3('s3://igvf-catalog-parsed-collections/variants_diseases/*.jsonl', 'JSONEachRow')

variants_diseases_genes: |
  INSERT INTO variants_diseases_genes
  SELECT inheritance_mode, name, inverse_name, source, source_url, _key as id, splitByString('/', assumeNotNull(_from))[2] as variants_diseases_id, splitByString('/', assumeNotNull(_to))[2] as genes_id
  FROM s3('s3://igvf-catalog-parsed-collections/variants_diseases_genes/*.jsonl', 'JSONEachRow')

genes_biosamples: |
  INSERT INTO genes_biosamples
  SELECT biology_context, model_id, model_type, cancer_term, gene_dependency, source, source_url, source_file, name, inverse_name, _key as id, splitByString('/', assumeNotNull(_from))[2] as genes_id, splitByString('/', assumeNotNull(_to))[2] as ontology_terms_id
  FROM s3('s3://igvf-catalog-parsed-collections/genes_biosamples/*.jsonl', 'JSONEachRow')

complexes: |
  INSERT INTO complexes
  SELECT name, alias, molecules, evidence_code, experimental_evidence, description, complex_assembly, complex_source, reactome_xref, source, source_url, _key as id
  FROM s3('s3://igvf-catalog-parsed-collections/complexes/*.jsonl', 'JSONEachRow')

complexes_proteins: |
  INSERT INTO complexes_proteins
  SELECT stoichiometry, chain_id, isoform_id, number_of_paralogs, paralogs, linked_features, source, source_url, _key as id, splitByString('/', assumeNotNull(_from))[2] as complexes_id, splitByString('/', assumeNotNull(_to))[2] as proteins_id
  FROM s3('s3://igvf-catalog-parsed-collections/complexes_proteins/*.jsonl', 'JSONEachRow', 'stoichiometry Int32, chain_id String, isoform_id String, number_of_paralogs Float64, paralogs Array(String), linked_features Array(JSON), source String, source_url String, _key String, _from String, _to String')

complexes_terms: |
  INSERT INTO complexes_terms
  SELECT term_name, source, source_url, name, inverse_name, _key as id, splitByString('/', assumeNotNull(_from))[2] as complexes_id, splitByString('/', assumeNotNull(_to))[2] as ontology_terms_id
  FROM s3('s3://igvf-catalog-parsed-collections/clickhouse/complexes_terms.jsonl.gz', 'JSONEachRow');

mm_genes: |
  INSERT INTO mm_genes
  SELECT chr, start, end, name, gene_id, gene_type, mgi, entrez, alias, source, version, source_url, organism, _key as id
  FROM s3('s3://igvf-catalog-parsed-collections/mm_genes/*.jsonl', 'JSONEachRow')

mm_transcripts: |
  INSERT INTO mm_transcripts
  SELECT chr, start, end, gene_name, name, transcript_id, transcript_type, source, version, source_url, organism, _key as id
  FROM s3('s3://igvf-catalog-parsed-collections/mm_transcripts/*.jsonl', 'JSONEachRow')

mm_variants: |
  INSERT INTO mm_variants
  SELECT chr, pos, rsid, ref, alt, organism, name, spdi, hgvs, qual, filter, fi, strain, source, source_url, _key as id
  FROM s3('s3://igvf-catalog-parsed-collections/mm_variants/*.jsonl', 'JSONEachRow')

genes_mm_genes: |
  INSERT INTO genes_mm_genes
  SELECT name, inverse_name, source, source_url, _key as id, splitByString('/', assumeNotNull(_from))[2] as genes_id, splitByString('/', assumeNotNull(_to))[2] as mm_genes_id
  FROM s3('s3://igvf-catalog-parsed-collections/genes_mm_genes/*.jsonl', 'JSONEachRow')

coding_variants_phenotypes: |
  INSERT INTO coding_variants_phenotypes
  SELECT abundance_score, abundance_sd, abundance_se, ci_upper, ci_lower, abundance_Rep1, abundance_Rep2, abundance_Rep3, source, source_url, _key as id, splitByString('/', assumeNotNull(_from))[2] as coding_variants_id, splitByString('/', assumeNotNull(_to))[2] as ontology_terms_id
  FROM s3('s3://igvf-catalog-parsed-collections/coding_variants_phenotypes/*.jsonl', 'JSONEachRow')
